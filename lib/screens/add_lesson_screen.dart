// learnflow_ai/flutter_app/lib/screens/add_lesson_screen.dart

import 'package:flutter/material.dart';
import 'package:learnflow_ai/models/lesson.dart';
import 'package:learnflow_ai/services/api_service.dart';

class AddLessonScreen extends StatefulWidget {
  const AddLessonScreen({super.key});

  @override
  State<AddLessonScreen> createState() => _AddLessonScreenState();
}

class _AddLessonScreenState extends State<AddLessonScreen> {
  final _formKey = GlobalKey<FormState>();
  final ApiService _apiService = ApiService();

  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _subjectController = TextEditingController();
  String? _difficultyLevel; // Dropdown for difficulty
  final TextEditingController _versionController = TextEditingController();

  bool _isLoading = false;

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _subjectController.dispose();
    _versionController.dispose();
    super.dispose();
  }

  Future<void> _submitLesson() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
      });

      final newLesson = Lesson(
        // UUID will be generated by Django, so we don't pass it here
        uuid: '', // Placeholder, Django will assign
        title: _titleController.text,
        description: _descriptionController.text,
        subject: _subjectController.text,
        difficultyLevel: _difficultyLevel,
        version: int.tryParse(_versionController.text) ?? 1, // Default to 1 if parsing fails
        createdAt: DateTime.now(), // Will be overridden by Django
        updatedAt: DateTime.now(), // Will be overridden by Django
        // REMOVED: lessonFile: null,
        // REMOVED: prerequisites: null,
      );

      final createdLesson = await _apiService.createLesson(newLesson);

      setState(() {
        _isLoading = false;
      });

      if (createdLesson != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Lesson "${createdLesson.title}" created successfully!')),
        );
        // Optionally, clear the form or navigate back
        _titleController.clear();
        _descriptionController.clear();
        _subjectController.clear();
        _difficultyLevel = null;
        _versionController.clear();
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Failed to create lesson. Please try again.')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add New Lesson'),
        backgroundColor: Colors.deepPurple,
        foregroundColor: Colors.white,
        centerTitle: true,
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.deepPurple.shade700, Colors.purpleAccent.shade400],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildTextField(_titleController, 'Lesson Title', 'Please enter a title', Icons.title),
                  _buildTextField(_descriptionController, 'Description', 'Please enter a description', Icons.description, maxLines: 5),
                  _buildTextField(_subjectController, 'Subject', 'Please enter a subject', Icons.subject),

                  _buildDropdownField(
                    'Difficulty Level',
                    _difficultyLevel,
                    ['Easy', 'Medium', 'Hard'],
                    (String? newValue) {
                      setState(() {
                        _difficultyLevel = newValue;
                      });
                    },
                    Icons.bar_chart,
                  ),

                  _buildTextField(_versionController, 'Version (e.g., 1)', 'Please enter a version number', Icons.numbers, keyboardType: TextInputType.number),

                  const SizedBox(height: 30),
                  Center(
                    child: _isLoading
                        ? const CircularProgressIndicator(color: Colors.white)
                        : ElevatedButton.icon(
                            onPressed: _submitLesson,
                            icon: const Icon(Icons.add_box),
                            label: const Text('Add Lesson'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.purple,
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 15),
                              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                              textStyle: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                              elevation: 5,
                            ),
                          ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField(TextEditingController controller, String label, String validationMessage, IconData icon, {int maxLines = 1, TextInputType keyboardType = TextInputType.text}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 10.0),
      child: TextFormField(
        controller: controller,
        maxLines: maxLines,
        keyboardType: keyboardType,
        style: const TextStyle(color: Colors.black87),
        decoration: InputDecoration(
          labelText: label,
          labelStyle: TextStyle(color: Colors.deepPurple.shade700),
          prefixIcon: Icon(icon, color: Colors.deepPurple.shade400),
          filled: true,
          fillColor: Colors.white.withOpacity(0.9),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide.none,
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(color: Colors.deepPurple.shade700, width: 2),
          ),
          errorStyle: const TextStyle(color: Colors.redAccent, fontWeight: FontWeight.bold),
        ),
        validator: (value) {
          if (value == null || value.isEmpty) {
            return validationMessage;
          }
          return null;
        },
      ),
    );
  }

  Widget _buildDropdownField(String label, String? currentValue, List<String> items, ValueChanged<String?> onChanged, IconData icon) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 10.0),
      child: DropdownButtonFormField<String>(
        value: currentValue,
        decoration: InputDecoration(
          labelText: label,
          labelStyle: TextStyle(color: Colors.deepPurple.shade700),
          prefixIcon: Icon(icon, color: Colors.deepPurple.shade400),
          filled: true,
          fillColor: Colors.white.withOpacity(0.9),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide.none,
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide(color: Colors.deepPurple.shade700, width: 2),
          ),
          errorStyle: const TextStyle(color: Colors.redAccent, fontWeight: FontWeight.bold),
        ),
        items: items.map<DropdownMenuItem<String>>((String value) {
          return DropdownMenuItem<String>(
            value: value,
            child: Text(value),
          );
        }).toList(),
        onChanged: onChanged,
        validator: (value) {
          if (value == null || value.isEmpty) {
            return 'Please select a $label';
          }
          return null;
        },
      ),
    );
  }
}
